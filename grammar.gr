Uzh

Grammars:
    code     := [assignment | function]*
    function := def id ( {id [, id]} ): \n block(4)
    block(n) := [space(n) [statement(n) | while(n) | if(n)] ]*

    while(n) := while expression: block(n+4)
    if(n)     := if   expression: block(n+4) {\n space(n) else: block(n+4)}

    statement  := [assignment | expression | return]
    assignment := var '=' expression
    return     := return expression

    expr := and  [   ||               and ]*
    and  := eq   [   &&               eq  ]*
    eq   := comp [  [== | !=]         comp]*
    comp := sum  [  [< | > | <= | >=] sum ]*
    sum  := mul  [  [+ | -]           mul ]*
    mul  := pow  [  [* | /]           pow ]*
    pow  := neg  [  [* | /]           neg ]*

    neg   := {[!]} brack
    brack := [sin | cos | ln | print] ( var ) | input | var

    var       := number | ( expression ) | func_call | id {[expression]}
    func_call := id ( {expression [, expression]} )

Lexems:
    number = [0-9]+
    id     = [a-z][a-z0-9]*

How to read

while !Eof:
    tree->parent = read_
    tree->parent->left = tree
    tree = tree->parent


; This file was autmatically compiled by Uzh lang compiler
; register bx is used for pointing to begin of local vars
; register cx is used for temporary using of var address
; register dx is used for returning values from func
push 10
pop bx
push 0
; getting var mas
    push 0
    ; index
push 9
    add
    pop cx
    pop [cx]

jmp :end_of_func_fib
:fib
; getting var mas
    push 0
    ; index
push 0
    add
    pop cx
    push [cx]
out
; getting var mas
    push 0
    ; index
push 1
    add
    pop cx
    push [cx]
out
push 2
; getting var i
    push bx
    push 0
    add
    pop cx
    pop [cx]
; starting while 0
    :begin_of_while_0
; getting var i
    push bx
    push 0
    add
    pop cx
    push [cx]
push 10
less
   push 0
    je :end_of_while_0
push 0
push 15
sub
out
; getting var mas
    push 0
    ; index
; getting var i
    push bx
    push 0
    add
    pop cx
    push [cx]
push 1
sub
    add
    pop cx
    push [cx]
out
; getting var mas
    push 0
    ; index
; getting var i
    push bx
    push 0
    add
    pop cx
    push [cx]
push 2
sub
    add
    pop cx
    push [cx]
out
; getting var mas
    push 0
    ; index
; getting var i
    push bx
    push 0
    add
    pop cx
    push [cx]
push 1
sub
    add
    pop cx
    push [cx]
; getting var mas
    push 0
    ; index
; getting var i
    push bx
    push 0
    add
    pop cx
    push [cx]
push 2
sub
    add
    pop cx
    push [cx]
add
; getting var mas
    push 0
    ; index
; getting var i
    push bx
    push 0
    add
    pop cx
    push [cx]
    add
    pop cx
    pop [cx]
; getting var mas
    push 0
    ; index
; getting var i
    push bx
    push 0
    add
    pop cx
    push [cx]
    add
    pop cx
    push [cx]
out
; getting var i
    push bx
    push 0
    add
    pop cx
    push [cx]
push 1
add
; getting var i
    push bx
    push 0
    add
    pop cx
    pop [cx]
    jmp :begin_of_while_0
    :end_of_while_0
push 0
    pop dx
    ret

:end_of_func_fib


jmp :end_of_func_printMas
:printMas
; getting var mas
    push 0
    ; index
push 0
    add
    pop cx
    push [cx]
out
; getting var mas
    push 0
    ; index
push 1
    add
    pop cx
    push [cx]
out
push 0
; getting var i
    push bx
    push 0
    add
    pop cx
    pop [cx]
; starting while 1
    :begin_of_while_1
; getting var i
    push bx
    push 0
    add
    pop cx
    push [cx]
push 10
less
   push 0
    je :end_of_while_1
; getting var mas
    push 0
    ; index
; getting var i
    push bx
    push 0
    add
    pop cx
    push [cx]
    add
    pop cx
    push [cx]
out
; getting var i
    push bx
    push 0
    add
    pop cx
    push [cx]
push 1
add
; getting var i
    push bx
    push 0
    add
    pop cx
    pop [cx]
    jmp :begin_of_while_1
    :end_of_while_1
push 0
    pop dx
    ret

:end_of_func_printMas


jmp :end_of_func_main
:main
in
; getting var mas
    push 0
    ; index
push 0
    add
    pop cx
    pop [cx]
in
; getting var mas
    push 0
    ; index
push 1
    add
    pop cx
    pop [cx]
; calling function 
    push bx
    push 0
    add    
    pop bx
call :fib
push dx

    push bx
    push 0
    add    
    pop bx
; calling function 
    push bx
    push 0
    add    
    pop bx
call :printMas
push dx

    push bx
    push 0
    add    
    pop bx

jmp :end_of_all_program

:end_of_func_main



jmp :main
:end_of_all_program

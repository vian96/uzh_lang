; This file was autmatically compiled by Uzh lang compiler
; register cx is used for temporary using of var address

jmp :main


:main
push 0
; getting var x
    push bx
    push 2
    add
    ; index
push 9
    add
    pop cx
pop [cx]
push 0
; getting var i
    push bx
    push 12
    add
    pop cx
pop [cx]
in
; getting var ask
    push bx
    push 13
    add
    pop cx
pop [cx]
; starting if 0
; getting var ask
    push bx
    push 13
    add
    pop cx
push [cx]
   push 0
    je :false_branch_if_0
; true branch of if
; starting while 0
    :begin_of_while_0
; getting var i
    push bx
    push 12
    add
    pop cx
push [cx]
push 10
less
   push 0
    je :end_of_while_0
in
; getting var x
    push bx
    push 2
    add
    ; index
; getting var i
    push bx
    push 12
    add
    pop cx
push [cx]
    add
    pop cx
pop [cx]
; getting var i
    push bx
    push 12
    add
    pop cx
push [cx]
push 1
add
; getting var i
    push bx
    push 12
    add
    pop cx
pop [cx]
    jmp :begin_of_while_0
    :end_of_while_0
push 0
; getting var i
    push bx
    push 12
    add
    pop cx
pop [cx]
; starting while 1
    :begin_of_while_1
; getting var i
    push bx
    push 12
    add
    pop cx
push [cx]
push 10
less
   push 0
    je :end_of_while_1
; getting var i
    push bx
    push 12
    add
    pop cx
push [cx]
out
push 10
; getting var x
    push bx
    push 2
    add
    ; index
; getting var i
    push bx
    push 12
    add
    pop cx
push [cx]
    add
    pop cx
push [cx]
mul
out
; getting var i
    push bx
    push 12
    add
    pop cx
push [cx]
push 1
add
; getting var i
    push bx
    push 12
    add
    pop cx
pop [cx]
    jmp :begin_of_while_1
    :end_of_while_1
push 2
out
    jmp :end_of_if_0
    :false_branch_if_0
push 1
out
    :end_of_if_0